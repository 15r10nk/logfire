# TODO revert this file to hatchling using https://github.com/pydantic/platform/pull/264/commits/01e4d2258776f98284d019d5040eceeb5e9af42f
# when we move it to a new repo

[tool.poetry]
name = "logfire"
version = "0.8.2"
description = "The observability framework focused on developer experience! ðŸš€"
authors = ["Pydantic Team <hello@pydantic.dev>"]
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.8"
opentelemetry-sdk = ">=1.21.0"
opentelemetry-exporter-otlp-proto-http = ">=1.21.0"
opentelemetry-instrumentation = ">=0.41b0"
rich = ">=13.4.2"
structlog = ">=23.1.0"
protobuf = ">=4.23.4"
typing-extensions = ">=4.0.0"
rtoml = { version = ">=0.9.0", python = "<3.11" }
# Extras
httpx = { version = ">=0.22.0", optional = true }
pydantic = {git = "https://github.com/pydantic/pydantic.git", optional = true }
starlette = { version = ">=0.27.0", optional = true }
Flask = { version = ">=3.0.0", optional = true }
dirty-equals = { version = ">=0.6.0", optional = true }
pytest = { version = ">=7.4.2", optional = true }
opentelemetry-instrumentation-asgi = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-wsgi = {version = ">=0.42b0", optional = true}
opentelemetry-instrumentation-httpx = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-requests = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-sqlalchemy = { version = ">=0.42b0", optional = true }
opentelemetry-instrumentation-system-metrics = { version = ">=0.42b0", optional = true }
requests = { version = ">=2.31.0", optional = true }
sqlalchemy = { version = ">=2.0.22", optional = true }
pandas = [
    {version = "<2.1.0", python = "3.8", optional = true},
    {version = ">=2.1.0", python = ">=3.9", optional = true}
]
attrs = { version = ">=23.1.0", optional = true }
# gitpython is optionally used to get the current git commit hash without a subprocess call
gitpython = { version = ">=3.1.40", optional = true }
# test dependencies
anyio = { version = ">=3", optional = true }
coverage = { version = ">=7", optional = true }

[tool.poetry.extras]
dash = ["httpx"]
system-metrics = ["opentelemetry-instrumentation-system-metrics"]
# `all` is meant to install all dependencies that are being used in the `logfire` module.
# In this case `all` = `dash` + `system-metrics`.
all = ["httpx", "opentelemetry-instrumentation-system-metrics"]
test = [
    "anyio",
    "coverage",
    "httpx",
    "starlette",
    "Flask",
    "dirty-equals",
    "pytest",
    "pydantic",
    "requests",
    "sqlalchemy",
    "pandas",
    "attrs",
    "opentelemetry-instrumentation-asgi",
    "opentelemetry-instrumentation-httpx",
    "opentelemetry-instrumentation-requests",
    "opentelemetry-instrumentation-sqlalchemy",
    "opentelemetry-instrumentation-wsgi",
    "opentelemetry-instrumentation-system-metrics",
    "gitpython",
]

[tool.poetry.scripts]
logfire = "logfire.cli:main"

[tool.poetry.plugins."pydantic"]
logfire-plugin = "logfire.integrations.pydantic_plugin:plugin"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."pytest11"]
logfire = "logfire.testing"

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
branch = true

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
skip_covered = true
show_missing = true
ignore_errors = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
    'if __name__ == .__main__.:',
]
